==25685== Memcheck, a memory error detector
==25685== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==25685== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==25685== Command: ./TestGraph
==25685== 
Running main() from gtest_main.cc
[==========] Running 80 tests from 2 test cases.
[----------] Global test environment set-up.
[----------] 40 tests from TestGraph/0, where TypeParam = boost::adjacency_list<boost::setS, boost::vecS, boost::directedS, boost::no_property, boost::no_property, boost::no_property, boost::listS>
[ RUN      ] TestGraph/0.test_vertex
[       OK ] TestGraph/0.test_vertex (34 ms)
[ RUN      ] TestGraph/0.test_edge
[       OK ] TestGraph/0.test_edge (53 ms)
[ RUN      ] TestGraph/0.test_vertices
[       OK ] TestGraph/0.test_vertices (7 ms)
[ RUN      ] TestGraph/0.test_edges
[       OK ] TestGraph/0.test_edges (30 ms)
[ RUN      ] TestGraph/0.test_adjacent_vertices
[       OK ] TestGraph/0.test_adjacent_vertices (15 ms)
[ RUN      ] TestGraph/0.add_edge_1
[       OK ] TestGraph/0.add_edge_1 (3 ms)
[ RUN      ] TestGraph/0.add_edge_2
[       OK ] TestGraph/0.add_edge_2 (3 ms)
[ RUN      ] TestGraph/0.add_edge_3
[       OK ] TestGraph/0.add_edge_3 (3 ms)
[ RUN      ] TestGraph/0.add_vertex_1
[       OK ] TestGraph/0.add_vertex_1 (2 ms)
[ RUN      ] TestGraph/0.add_vertex_2
[       OK ] TestGraph/0.add_vertex_2 (3 ms)
[ RUN      ] TestGraph/0.add_vertex_3
[       OK ] TestGraph/0.add_vertex_3 (6 ms)
[ RUN      ] TestGraph/0.add_vertex_4
[       OK ] TestGraph/0.add_vertex_4 (200 ms)
[ RUN      ] TestGraph/0.add_vertex_5
[       OK ] TestGraph/0.add_vertex_5 (15784 ms)
[ RUN      ] TestGraph/0.adjacent_vertices_1
[       OK ] TestGraph/0.adjacent_vertices_1 (5 ms)
[ RUN      ] TestGraph/0.adjacent_vertices_2
[       OK ] TestGraph/0.adjacent_vertices_2 (7 ms)
[ RUN      ] TestGraph/0.adjacent_vertices_3
[       OK ] TestGraph/0.adjacent_vertices_3 (10 ms)
[ RUN      ] TestGraph/0.edge_1
[       OK ] TestGraph/0.edge_1 (8 ms)
[ RUN      ] TestGraph/0.edge_2
TestGraph.c++:505: Failure
Value of: p3.first
  Actual: (2,3)
Expected: edCD
Which is: (0,1)
[  FAILED  ] TestGraph/0.edge_2, where TypeParam = boost::adjacency_list<boost::setS, boost::vecS, boost::directedS, boost::no_property, boost::no_property, boost::no_property, boost::listS> (38 ms)
[ RUN      ] TestGraph/0.edge_3
[       OK ] TestGraph/0.edge_3 (3 ms)
[ RUN      ] TestGraph/0.edges_1
[       OK ] TestGraph/0.edges_1 (8 ms)
[ RUN      ] TestGraph/0.edges_2
TestGraph.c++:599: Failure
Value of: ed
  Actual: (1,1)
Expected: edBC
Which is: (1,2)
[  FAILED  ] TestGraph/0.edges_2, where TypeParam = boost::adjacency_list<boost::setS, boost::vecS, boost::directedS, boost::no_property, boost::no_property, boost::no_property, boost::listS> (9 ms)
[ RUN      ] TestGraph/0.edges_3
[       OK ] TestGraph/0.edges_3 (1 ms)
[ RUN      ] TestGraph/0.num_edges_1
[       OK ] TestGraph/0.num_edges_1 (1 ms)
[ RUN      ] TestGraph/0.num_edges_2
[       OK ] TestGraph/0.num_edges_2 (1 ms)
[ RUN      ] TestGraph/0.num_edges_3
[       OK ] TestGraph/0.num_edges_3 (1 ms)
[ RUN      ] TestGraph/0.num_vertices_1
[       OK ] TestGraph/0.num_vertices_1 (1 ms)
[ RUN      ] TestGraph/0.num_vertices_2
[       OK ] TestGraph/0.num_vertices_2 (1 ms)
[ RUN      ] TestGraph/0.num_vertices_3
[       OK ] TestGraph/0.num_vertices_3 (1 ms)
[ RUN      ] TestGraph/0.source_1
[       OK ] TestGraph/0.source_1 (1 ms)
[ RUN      ] TestGraph/0.source_2
[       OK ] TestGraph/0.source_2 (1 ms)
[ RUN      ] TestGraph/0.source_3
[       OK ] TestGraph/0.source_3 (1 ms)
[ RUN      ] TestGraph/0.target_1
[       OK ] TestGraph/0.target_1 (1 ms)
[ RUN      ] TestGraph/0.target_2
[       OK ] TestGraph/0.target_2 (1 ms)
[ RUN      ] TestGraph/0.target_3
[       OK ] TestGraph/0.target_3 (1 ms)
[ RUN      ] TestGraph/0.vertex_1
[       OK ] TestGraph/0.vertex_1 (1 ms)
[ RUN      ] TestGraph/0.vertex_2
[       OK ] TestGraph/0.vertex_2 (1 ms)
[ RUN      ] TestGraph/0.vertex_3
[       OK ] TestGraph/0.vertex_3 (1 ms)
[ RUN      ] TestGraph/0.vertices_1
[       OK ] TestGraph/0.vertices_1 (1 ms)
[ RUN      ] TestGraph/0.vertices_2
[       OK ] TestGraph/0.vertices_2 (1 ms)
[ RUN      ] TestGraph/0.vertices_3
[       OK ] TestGraph/0.vertices_3 (1 ms)
[----------] 40 tests from TestGraph/0 (16266 ms total)

[----------] 40 tests from TestGraph/1, where TypeParam = Graph
[ RUN      ] TestGraph/1.test_vertex
[       OK ] TestGraph/1.test_vertex (7 ms)
[ RUN      ] TestGraph/1.test_edge
[       OK ] TestGraph/1.test_edge (8 ms)
[ RUN      ] TestGraph/1.test_vertices
[       OK ] TestGraph/1.test_vertices (5 ms)
[ RUN      ] TestGraph/1.test_edges
[       OK ] TestGraph/1.test_edges (4 ms)
[ RUN      ] TestGraph/1.test_adjacent_vertices
[       OK ] TestGraph/1.test_adjacent_vertices (4 ms)
[ RUN      ] TestGraph/1.add_edge_1
TestGraph.c++:220: Failure
Value of: num_edges(g)
  Actual: 1
Expected: 2
[  FAILED  ] TestGraph/1.add_edge_1, where TypeParam = Graph (10 ms)
[ RUN      ] TestGraph/1.add_edge_2
TestGraph.c++:238: Failure
Value of: num_edges(g)
  Actual: 1
Expected: 2
[  FAILED  ] TestGraph/1.add_edge_2, where TypeParam = Graph (4 ms)
[ RUN      ] TestGraph/1.add_edge_3
TestGraph.c++:254: Failure
Value of: num_edges(g)
  Actual: 1
Expected: 2
[  FAILED  ] TestGraph/1.add_edge_3, where TypeParam = Graph (4 ms)
[ RUN      ] TestGraph/1.add_vertex_1
[       OK ] TestGraph/1.add_vertex_1 (4 ms)
[ RUN      ] TestGraph/1.add_vertex_2
TestGraph.c++:293: Failure
Value of: vs
  Actual: 1
Expected: 2
[  FAILED  ] TestGraph/1.add_vertex_2, where TypeParam = Graph (5 ms)
[ RUN      ] TestGraph/1.add_vertex_3
TestGraph.c++:311: Failure
Value of: vs
  Actual: 1
Expected: n
Which is: 100
[  FAILED  ] TestGraph/1.add_vertex_3, where TypeParam = Graph (5 ms)
[ RUN      ] TestGraph/1.add_vertex_4
TestGraph.c++:329: Failure
Value of: vs
  Actual: 1
Expected: n
Which is: 10000
[  FAILED  ] TestGraph/1.add_vertex_4, where TypeParam = Graph (22 ms)
[ RUN      ] TestGraph/1.add_vertex_5
TestGraph.c++:346: Failure
Value of: vs
  Actual: 1
Expected: n
Which is: 1000000
[  FAILED  ] TestGraph/1.add_vertex_5, where TypeParam = Graph (1764 ms)
[ RUN      ] TestGraph/1.adjacent_vertices_1
TestGraph.c++:372: Failure
Value of: b
  Actual: 0x6de670
Expected: e
Which is: 0x6de674
[  FAILED  ] TestGraph/1.adjacent_vertices_1, where TypeParam = Graph (9 ms)
[ RUN      ] TestGraph/1.adjacent_vertices_2
[       OK ] TestGraph/1.adjacent_vertices_2 (4 ms)
[ RUN      ] TestGraph/1.adjacent_vertices_3
TestGraph.c++:440: Failure
Value of: b
  Actual: 0x6de67c
Expected: e
Which is: 0x6de674
[  FAILED  ] TestGraph/1.adjacent_vertices_3, where TypeParam = Graph (7 ms)
[ RUN      ] TestGraph/1.edge_1
[       OK ] TestGraph/1.edge_1 (6 ms)
[ RUN      ] TestGraph/1.edge_2
TestGraph.c++:513: Failure
Value of: es
  Actual: 1
Expected: 2
[  FAILED  ] TestGraph/1.edge_2, where TypeParam = Graph (9 ms)
[ RUN      ] TestGraph/1.edge_3
[       OK ] TestGraph/1.edge_3 (3 ms)
[ RUN      ] TestGraph/1.edges_1
[       OK ] TestGraph/1.edges_1 (4 ms)
[ RUN      ] TestGraph/1.edges_2
TestGraph.c++:609: Failure
Value of: b
  Actual: 0x6de674
Expected: e
Which is: 0x6de66c
[  FAILED  ] TestGraph/1.edges_2, where TypeParam = Graph (7 ms)
[ RUN      ] TestGraph/1.edges_3
[       OK ] TestGraph/1.edges_3 (1 ms)
[ RUN      ] TestGraph/1.num_edges_1
[       OK ] TestGraph/1.num_edges_1 (1 ms)
[ RUN      ] TestGraph/1.num_edges_2
[       OK ] TestGraph/1.num_edges_2 (1 ms)
[ RUN      ] TestGraph/1.num_edges_3
[       OK ] TestGraph/1.num_edges_3 (1 ms)
[ RUN      ] TestGraph/1.num_vertices_1
[       OK ] TestGraph/1.num_vertices_1 (1 ms)
[ RUN      ] TestGraph/1.num_vertices_2
[       OK ] TestGraph/1.num_vertices_2 (1 ms)
[ RUN      ] TestGraph/1.num_vertices_3
[       OK ] TestGraph/1.num_vertices_3 (1 ms)
[ RUN      ] TestGraph/1.source_1
[       OK ] TestGraph/1.source_1 (1 ms)
[ RUN      ] TestGraph/1.source_2
[       OK ] TestGraph/1.source_2 (1 ms)
[ RUN      ] TestGraph/1.source_3
[       OK ] TestGraph/1.source_3 (1 ms)
[ RUN      ] TestGraph/1.target_1
[       OK ] TestGraph/1.target_1 (1 ms)
[ RUN      ] TestGraph/1.target_2
[       OK ] TestGraph/1.target_2 (1 ms)
[ RUN      ] TestGraph/1.target_3
[       OK ] TestGraph/1.target_3 (1 ms)
[ RUN      ] TestGraph/1.vertex_1
[       OK ] TestGraph/1.vertex_1 (1 ms)
[ RUN      ] TestGraph/1.vertex_2
[       OK ] TestGraph/1.vertex_2 (1 ms)
[ RUN      ] TestGraph/1.vertex_3
[       OK ] TestGraph/1.vertex_3 (1 ms)
[ RUN      ] TestGraph/1.vertices_1
[       OK ] TestGraph/1.vertices_1 (1 ms)
[ RUN      ] TestGraph/1.vertices_2
[       OK ] TestGraph/1.vertices_2 (1 ms)
[ RUN      ] TestGraph/1.vertices_3
[       OK ] TestGraph/1.vertices_3 (1 ms)
[----------] 40 tests from TestGraph/1 (1919 ms total)

[----------] Global test environment tear-down
[==========] 80 tests from 2 test cases ran. (18209 ms total)
[  PASSED  ] 67 tests.
[  FAILED  ] 13 tests, listed below:
[  FAILED  ] TestGraph/0.edge_2, where TypeParam = boost::adjacency_list<boost::setS, boost::vecS, boost::directedS, boost::no_property, boost::no_property, boost::no_property, boost::listS>
[  FAILED  ] TestGraph/0.edges_2, where TypeParam = boost::adjacency_list<boost::setS, boost::vecS, boost::directedS, boost::no_property, boost::no_property, boost::no_property, boost::listS>
[  FAILED  ] TestGraph/1.add_edge_1, where TypeParam = Graph
[  FAILED  ] TestGraph/1.add_edge_2, where TypeParam = Graph
[  FAILED  ] TestGraph/1.add_edge_3, where TypeParam = Graph
[  FAILED  ] TestGraph/1.add_vertex_2, where TypeParam = Graph
[  FAILED  ] TestGraph/1.add_vertex_3, where TypeParam = Graph
[  FAILED  ] TestGraph/1.add_vertex_4, where TypeParam = Graph
[  FAILED  ] TestGraph/1.add_vertex_5, where TypeParam = Graph
[  FAILED  ] TestGraph/1.adjacent_vertices_1, where TypeParam = Graph
[  FAILED  ] TestGraph/1.adjacent_vertices_3, where TypeParam = Graph
[  FAILED  ] TestGraph/1.edge_2, where TypeParam = Graph
[  FAILED  ] TestGraph/1.edges_2, where TypeParam = Graph

13 FAILED TESTS
==25685== 
==25685== HEAP SUMMARY:
==25685==     in use at exit: 0 bytes in 0 blocks
==25685==   total heap usage: 3,003 allocs, 3,003 frees, 119,680,667 bytes allocated
==25685== 
==25685== All heap blocks were freed -- no leaks are possible
==25685== 
==25685== For counts of detected and suppressed errors, rerun with: -v
==25685== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
